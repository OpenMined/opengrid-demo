rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function incomingDataHasOnly(field) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly([field])
    }

    function isLoggedIn() {
      return request.auth != null;
    }

    match /datasets/{dataset} {
      function isDatasetOwner() {
        return isLoggedIn() && request.auth.uid == resource.data.author
      }

      allow read;
      allow update: if isDatasetOwner() || (!isDatasetOwner() && incomingDataHasOnly('upvotes'));
      allow delete: if isDatasetOwner();
      allow create: if isLoggedIn(); 
    }

    match /models/{model} {
      function isModelOwner() {
        return isLoggedIn() && request.auth.uid == resource.data.author
      }

      allow read;
      allow update: if isModelOwner() || (!isModelOwner() && incomingDataHasOnly('upvotes'));
      allow delete: if isModelOwner();
      allow create: if isLoggedIn(); 
    }

    match /users/{user} {
      allow read;
      allow write: if isLoggedIn() && request.auth.uid == user;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}