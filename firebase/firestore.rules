rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function incomingDataHasOnly(field) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly([field])
    }

    match /datasets/{dataset} {
      function isDatasetOwner() {
        return request.auth != null && request.auth.uid == resource.data.author
      }
      allow read;
      allow update: if isDatasetOwner() || (!isDatasetOwner() && incomingDataHasOnly('upvotes'));
      allow delete: if isDatasetOwner();
      allow create: if request.auth != null; 
    }
    match /users/{user} {
      allow read;
      allow write: if request.auth != null && request.auth.uid == user;
    }
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    match /{userId}/profilePicture/{fileName} {
      allow read;
      allow write: if request.auth.uid == userId
                   && request.resource.contentType.matches('image/.+');
    }
  }
}