rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function incomingDataHasOnly(field) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly([field])
    }

    function onlyAddsOneElement(listField, value) {
      return request.resource.data[listField] == resource.data[listField].concat([value])
    }

    function onlyRemovesOneElement(listField, value) {
      return request.resource.data[listField] == resource.data[listField].removeAll([value])
    }

    function isLoggedIn() {
      return request.auth != null;
    }

    function isDatasetOrModelOwner() {
      return isLoggedIn() && request.auth.uid == resource.data.author
    }

    function canUpdateDatasetOrModel(reqData, currData, uid) {
      // IF they own the dataset or model
      return (
        (
          isDatasetOrModelOwner()

          // ... and they're not modifying the author
          && (!("author" in reqData) || reqData.author == uid)

          // ... and they're not modifying the upvotes
          && (!("upvotes" in reqData) || reqData.upvotes == currData.upvotes)

          // ... and they're not modifying created_at
          && (!("created_at" in reqData) || reqData.created_at == currData.created_at)

          // ... and updated_at reflects the current server time
          && (!("updated_at" in reqData) || reqData.updated_at == request.time)
        )

        // OR they are not the owner
        || (
          !isDatasetOrModelOwner()

          // ... and the changed data only includes upvotes
          && incomingDataHasOnly('upvotes')

          // ... and they're only adding their uid to the upvotes and the current data doesn't already contain their uid
          && (
            (onlyAddsOneElement('upvotes', uid) && !currData.upvotes.hasAny([uid]))

            // ... or they're removing their uid from the upvotes
            || onlyRemovesOneElement('upvotes', uid)
          )
        )
      );
    }

    function canCreateDatasetOrModel(reqData, uid) {
      // IF they are logged in
      return (
        isLoggedIn()

        // ... and the upvotes field is empty
        && ("upvotes" in reqData && reqData.upvotes == [])

        // ... and the author must be the one making the request
        && reqData.author == uid

        // ... and created_at and updated_at must reflec the current server timestamp
        && reqData.created_at == request.time
        && reqData.updated_at == request.time
      );
    }

    match /datasets/{dataset} {
      allow read;
      allow update: if canUpdateDatasetOrModel(request.resource.data, resource.data, request.auth.uid);
      allow delete: if isDatasetOrModelOwner();
      allow create: if canCreateDatasetOrModel(request.resource.data, request.auth.uid);
    }

    match /models/{model} {
      allow read;
      allow update: if canUpdateDatasetOrModel(request.resource.data, resource.data, request.auth.uid);
      allow delete: if isDatasetOrModelOwner();
      allow create: if canCreateDatasetOrModel(request.resource.data, request.auth.uid);
    }

    match /users/{user} {
      allow read;
      allow write: if isLoggedIn() && request.auth.uid == user;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}